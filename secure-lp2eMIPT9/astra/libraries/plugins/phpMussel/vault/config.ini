[general]

; Unset variables and cache used by the script after the initial upload
; scanning? False = No; True = Yes [Default]. If you -aren't- using the script
; beyond the initial scanning of uploads, you should set this to true (yes), to
; minimize memory usage. If you -are- using the script beyond the initial
; scanning of uploads, should set to false (no), to avoid unnecessarily
; reloading duplicate data into memory. In general practice, it should usually
; be set to true, but, if you do this, you won't be able to use the script for
; anything other than the initial file upload scanning. Has no influence in CLI
; mode.
cleanup=true

; Filename of file to log all scanning results to. Specify a filename, or leave
; blank to disable.
scan_log='scan_log.txt'

; Filename of file to log all scanning results to (using a serialised format).
; Specify a filename, or leave blank to disable.
scan_log_serialized='scan_log_serialized.txt'

; Filename of file to log all records of blocked or killed uploads to. Specify
; a filename, or leave blank to disable.
scan_kills='scan_kills.txt'

; Truncate logfiles when they reach a certain size? Value is the maximum size
; in B/KB/MB/GB/TB that a logfile may grow to before being truncated. The
; default value of 0KB disables truncation (logfiles can grow indefinitely).
; Note: Applies to individual logfiles! The size of logfiles is not considered
; collectively.
truncate='0KB'

; Your timezone.
timezone='SYSTEM'

; Timezone offset in minutes.
timeOffset=0

; The date/time notation format used by phpMussel. Additional options may be
; added upon request.
timeFormat='{Day}, {dd} {Mon} {yyyy} {hh}:{ii}:{ss} {tz}'

; Where to find the IP address of connecting requests? (Useful for services
; such as Cloudflare and the likes) Default = REMOTE_ADDR. WARNING: Don't
; change this unless you know what you're doing!
ipaddr='REMOTE_ADDR'

; Enable support for phpMussel plugins? False = No; True = Yes [Default].
enable_plugins=true

; Should phpMussel send 403 headers with the file upload blocked message, or
; stick with the usual 200 OK? False = No (200); True = Yes (403) [Default].
forbid_on_block=true

; Enabling this directive will instruct the script to attempt to immediately
; delete any scanned attempted file upload matching any detection criteria,
; whether via signatures or otherwise. Files determined to be "clean" won't be
; touched. In the case of archives, the entire archive will be deleted,
; regardless of whether or not the offending file is only one of several files
; contained within the archive. For the case of file upload scanning, usually,
; it isn't necessary to enable this directive, because usually, PHP will
; automatically purge the contents of its cache when execution has finished,
; meaning it'll usually delete any files uploaded through it to the server
; unless they've been moved, copied or deleted already. This directive is added
; here as an extra measure of security for those whose copies of PHP mightn't
; always behave in the manner expected. False = After scanning, leave the file
; alone [Default]; True = After scanning, if not clean, delete immediately.
delete_on_sight=false

; Specify the default language for phpMussel.
lang='en'

; How do you prefer numbers to be displayed? Select the example that looks the
; most correct to you.
numbers='Latin-1'

; phpMussel is able to quarantine flagged attempted file uploads in isolation
; within the phpMussel vault, if this is something you want it to do. Casual
; users of phpMussel that simply wish to protect their websites or hosting
; environment without having any interest in deeply analysing any flagged
; attempted file uploads should leave this functionality disabled, but any
; users interested in further analysis of flagged attempted file uploads for
; malware research or for similar such things should enable this functionality.
; Quarantining of flagged attempted file uploads can sometimes also assist in
; debugging false positives, if this is something that frequently occurs for
; you. To disable quarantine functionality, simply leave the quarantine_key
; directive empty, or erase the contents of that directive if it isn't already
; empty. To enable quarantine functionality, enter some value into the
; directive. The quarantine_key is an important security feature of the
; quarantine functionality required as a means of preventing the quarantine
; functionality from being exploited by potential attackers and as a means of
; preventing any potential execution of data stored within the quarantine. The
; quarantine_key should be treated in the same manner as your passwords: The
; longer the better, and guard it tightly. For best effect, use in conjunction
; with delete_on_sight.
quarantine_key=''

; The maximum filesize allowed for files to be quarantined. Files larger than
; the value specified will NOT be quarantined. This directive is important as a
; means of making it more difficult for any potential attackers to flood your
; quarantine with unwanted data potentially causing run-away data usage on your
; hosting service. Default = 2MB.
quarantine_max_filesize='2MB'

; The maximum memory usage allowed for the quarantine. If the total memory used
; by the quarantine reaches this value, the oldest quarantined files will be
; deleted until the total memory used no longer reaches this value. This
; directive is important as a means of making it more difficult for any
; potential attackers to flood your quarantine with unwanted data potentially
; causing run-away data usage on your hosting service. Default = 64MB.
quarantine_max_usage='64MB'

; When honeypot mode is enabled, phpMussel will attempt to quarantine every
; single file upload that it encounters, regardless of whether or not the file
; being uploaded matches any included signatures, and no actual scanning or
; analysis of those attempted file uploads will actually occur. This
; functionality should be useful for those that wish to use phpMussel for the
; purposes of virus/malware research, but it's neither recommended to enable
; this functionality if the intended use of phpMussel by the user is for actual
; file upload scanning, nor recommended to use the honeypot functionality for
; purposes other than honeypotting. By default, this option is disabled. False
; = Disabled [Default]; True = Enabled.
honeypot_mode=false

; For how long should phpMussel cache the results of scanning? Value is the
; number of seconds to cache the results of scanning for. Default is 21600
; seconds (6 hours); A value of 0 will disable caching the results of scanning.
scan_cache_expiry=21600

; Disable CLI mode? CLI mode is enabled by default, but can sometimes interfere
; with certain testing tools (such as PHPUnit, for example) and other CLI-based
; applications. If you don't need to disable CLI mode, you should ignore this
; directive. False = Enable CLI mode [Default]; True = Disable CLI mode.
disable_cli=false

; Disable front-end access? Front-end access can make phpMussel more
; manageable, but can also be a potential security risk, too. It's recommended
; to manage phpMussel via the back-end whenever possible, but front-end access
; is provided for when it isn't possible. Keep it disabled unless you need it.
; False = Enable front-end access; True = Disable front-end access [Default].
disable_frontend=true

; Maximum number of login attempts (front-end). Default = 5.
max_login_attempts=5

; File for logging front-end login attempts. Specify a filename, or leave blank
; to disable.
FrontEndLog=''

; Disable webfonts? True = Yes; False = No [Default].
disable_webfonts=false

; Enable maintenance mode? True = Yes; False = No [Default]. Disables
; everything other than the front-end. Sometimes useful for when updating your
; CMS, frameworks, etc.
maintenance_mode=false

; Defines which algorithm to use for all future passwords and sessions.
; Options: PASSWORD_DEFAULT (default), PASSWORD_BCRYPT, PASSWORD_ARGON2I
; (requires PHP >= 7.2.0).
default_algo='PASSWORD_DEFAULT'

; Track phpMussel usage statistics?
statistics=false


[signatures]

; A list of the active signature files, delimited by commas.
Active=''

; Should phpMussel report when signatures files are missing or corrupted? If
; fail_silently is disabled, missing and corrupted files will be reported on
; scanning, and if fail_silently is enabled, missing and corrupted files will
; be ignored, with scanning reporting for those files that there aren't any
; problems. This should generally be left alone unless you're experiencing
; crashes or similar problems. False = Disabled; True = Enabled [Default].
fail_silently=true

; Should phpMussel report when extensions are missing? If
; fail_extensions_silently is disabled, missing extensions will be reported on
; scanning, and if fail_extensions_silently is enabled, missing extensions will
; be ignored, with scanning reporting for those files that there aren't any
; problems. Disabling this directive may potentially increase your security,
; but may also lead to an increase of false positives. False = Disabled; True =
; Enabled [Default].
fail_extensions_silently=true

; Should phpMussel parse signatures for detecting adware? False = No; True =
; Yes [Default].
detect_adware=true

; Should phpMussel parse signatures for detecting joke/hoax malware/viruses?
; False = No; True = Yes [Default].
detect_joke_hoax=true

; Should phpMussel parse signatures for detecting PUAs/PUPs? False = No; True =
; Yes [Default].
detect_pua_pup=true

; Should phpMussel parse signatures for detecting packers and packed data?
; False = No; True = Yes [Default].
detect_packer_packed=true

; Should phpMussel parse signatures for detecting shell scripts? False = No;
; True = Yes [Default].
detect_shell=true

; Should phpMussel parse signatures for detecting defacements and defacers?
; False = No; True = Yes [Default].
detect_deface=true

; Should phpMussel detect and block encrypted files? False = No; True = Yes
; [Default].
detect_encryption=true


[files]

; Maximum allowable number of files to scan during files upload scan before
; aborting the scan and informing the user they are uploading too much at once!
; Provides protection against a theoretical attack whereby an attacker attempts
; to DDoS your system or CMS by overloading phpMussel to slow down the PHP
; process to a grinding halt. Recommended: 10. You may wish to raise or lower
; this number depending on the speed of your hardware. Note that this number
; doesn't account for or include the contents of archives.
max_uploads=10

; Filesize limit in KB. 65536 = 64MB [Default]; 0 = No limit (always
; greylisted). Any (positive) numeric value accepted. This can be useful when
; your PHP configuration limits the amount of memory a process can hold or if
; your PHP configuration limits filesize of uploads.
filesize_limit='64MB'

; What to do with files that exceed the filesize limit (if one exists). False =
; Whitelist; True = Blacklist [Default].
filesize_response=true

; If your system only allows specific types of files to be uploaded, or if your
; system explicitly denies certain types of files, specifying those filetypes
; in whitelists, blacklists and greylists can increase the speed at which
; scanning is performed by allowing the script to skip over certain filetypes.
; Format is CSV (comma separated values). If you want to scan everything,
; rather than whitelist, blacklist or greylist, leave the variable(/s) blank;
; Doing so will disable whitelist/blacklist/greylist. Logical order of
; processing is: If the filetype is whitelisted, don't scan and don't block the
; file, and don't check the file against the blacklist or the greylist. If the
; filetype is blacklisted, don't scan the file but block it anyway, and don't
; check the file against the greylist. If the greylist is empty or if the
; greylist is not empty and the filetype is greylisted, scan the file as per
; normal and determine whether to block it based on the results of the scan,
; but if the greylist is not empty and the filetype is not greylisted, treat
; the file as blacklisted, therefore not scanning it but blocking it anyway.
; Whitelist:
filetype_whitelist=''

; Blacklist:
filetype_blacklist='386,acc*,acm,act*,apk,app,ash*,asm*,asx*,ax,bat,bin,ccc,cgi,cmd,com*,cpl,cpp,csh,dll,drv,elf,exe,fxp,gad*,hta*,htp*,ico,inf,ins,inx,ipa,isu,job,js,jse,ksh,lnk,msc,msi,msp,mst,net,ocx,ops,org,osx,out,paf,php*,pif,pl,prg,ps1,reg,rgs,rs,run,scr*,sct,shb,shs,sql*,sys,u3p,url,vb,vbe,vbs*,wor*,ws,wsf,xsl'

; Greylist:
filetype_greylist=''

; Attempt to check the contents of archives? False = Don't check; True = Check
; [Default]. Currently, the only archive and compression formats supported are
; BZ/BZIP2, GZ/GZIP, LZF, PHAR, TAR and ZIP (archive and compression formats
; RAR, CAB, 7z and etcetera not currently supported). This is not foolproof!
; While I highly recommend keeping this turned on, I can't guarantee it'll
; always find everything. Also be aware that archive checking currently is not
; recursive for PHARs or ZIPs.
check_archives=true

; Carry over filesize blacklisting/whitelisting to the contents of archives?
; False = No (just greylist everything); True = Yes [Default].
filesize_archives=true

; Carry over filetype blacklisting/whitelisting to the contents of archives?
; False = No (just greylist everything) [Default]; True = Yes.
filetype_archives=false

; Maximum recursion depth limit for archives. Default = 10.
max_recursion=10

; Detect and block encrypted archives? Because phpMussel isn't able to scan the
; contents of encrypted archives, it's possible that archive encryption may be
; employed by an attacker as a means of attempting to bypass phpMussel,
; anti-virus scanners and other such protections. Instructing phpMussel to
; block any archives that it discovers to be encrypted could potentially help
; reduce any risk associated with these such possibilities. False = No; True =
; Yes [Default].
block_encrypted_archives=true


[attack_specific]

; Search for PHP header in files that are neither PHP files nor recognised
; archives. False = Off; True = On.
chameleon_from_php=true

; Search for executable headers in files that are neither executables nor
; recognised archives and for executables whose headers are incorrect. False =
; Off; True = On.
chameleon_from_exe=true

; Search for archives whose headers are incorrect (Supported: BZ, GZ, RAR, ZIP,
; RAR, GZ). False = Off; True = On.
chameleon_to_archive=true

; Search for office documents whose headers are incorrect (Supported: DOC, DOT,
; PPS, PPT, XLA, XLS, WIZ). False = Off; True = On.
chameleon_to_doc=true

; Search for images whose headers are incorrect (Supported: BMP, DIB, PNG, GIF,
; JPEG, JPG, XCF, PSD, PDD, WEBP). False = Off; True = On.
chameleon_to_img=true

; Search for PDF files whose headers are incorrect. False = Off; True = On.
chameleon_to_pdf=true

; Recognised archive file extensions (format is CSV; should only add or remove
; when problems occur; unnecessarily removing may cause false positives to
; appear for archive files, whereas unnecessarily adding will essentially
; whitelist what you're adding from attack specific detection; modify with
; caution; also note that this has no effect on what archives can and can't be
; analysed at content-level). The list, as is at default, lists those formats
; used most commonly across the majority of systems and CMS, but intentionally
; isn't necessarily comprehensive.
archive_file_extensions='7z,a,ace,alz,apk,app,ar,arc,arj,ba,bh,bz,bz2,dmg,gz,ice,iso,lha,lz,lzh,lzo,lzw,lzx,mar,pak,pck,pea,phar,rar,rz,s7z,sea,sen,sfx,shar,sqx,tar,tgz,tlz,xar,xp3,xz,yz1,z,zz,paq*,sit*,tbz*,zip*'

; Block any files containing any control characters (other than newlines)?
; ([\x00-\x08\x0b\x0c\x0e\x1f\x7f]) If you're ONLY uploading plain-text, then
; you can turn this option on to provide some additional protection to your
; system. However, if you upload anything other than plain-text, turning this
; on may result in false positives. False = Don't block [Default]; True =
; Block.
block_control_characters=false

; Corrupted files and parse errors. False = Ignore; True = Block [Default].
; Detect and block potentially corrupted PE (Portable Executable) files? Often
; (but not always), when certain aspects of a PE file are corrupted or can't be
; parsed correctly, it can be indicative of a viral infection. The processes
; used by most anti-virus programs to detect viruses in PE files require
; parsing those files in certain ways, which, if the programmer of a virus is
; aware of, will specifically try to prevent, in order to allow their virus to
; remain undetected.
corrupted_exe=true

; Threshold for the length of raw data within which decode commands should be
; detected (in case there are any noticeable performance issues while
; scanning). Default = 512KB. Zero or null disables the threshold (removing any
; such limitation based on filesize).
decode_threshold='512KB'

; Threshold to the length of raw data that phpMussel is permitted to read and
; scan (in case there are any noticeable performance issues while scanning).
; Default = 32MB. Zero or null value disables the threshold. Generally, this
; value shouldn't be less than the average filesize of file uploads that you
; want and expect to receive to your server or website, shouldn't be more than
; the filesize_limit directive, and shouldn't be more than roughly one fifth of
; the total allowable memory allocation granted to PHP via the "php.ini"
; configuration file. This directive exists to try to prevent phpMussel from
; using up too much memory (that'd prevent it from being able to successfully
; scan files above a certain filesize).
scannable_threshold='32MB'


[compatibility]

; This directive should generally be disabled unless it's required for correct
; functionality of phpMussel on your specific system. Normally, when disabled,
; when phpMussel detects the presence of elements in the $_FILES array(), it'll
; attempt to initiate a scan of the files that those elements represent, and,
; if those elements are blank or empty, phpMussel will return an error message.
; This is proper behaviour for phpMussel. However, for some CMS, empty elements
; in $_FILES can occur as a result of the natural behaviour of those CMS, or
; errors may be reported when there aren't any, in which case, the normal
; behaviour for phpMussel will be interfering with the normal behaviour of
; those CMS. If such a situation occurs for you, enabling this option will
; instruct phpMussel to not attempt to initiate scans for such empty elements,
; ignore them when found and to not return any related error messages, thus
; allowing continuation of the page request. False = OFF; True = ON.
ignore_upload_errors=true

; If you only expect or only intend to allow images to be uploaded to your
; system or CMS, and if you absolutely don't require any files other than
; images to be uploaded to your system or CMS, this directive should be
; enabled, but should otherwise be disabled. If this directive is enabled,
; it'll instruct phpMussel to indiscriminately block any uploads identified as
; non-image files, without scanning them. This may reduce processing time and
; memory usage for attempted uploads of non-image files. False = OFF; True =
; ON.
only_allow_images=false


[heuristic]

; There are certain signatures of phpMussel that are intended to identify
; suspicious and potentially malicious qualities of files being uploaded
; without in themselves identifying those files being uploaded specifically as
; being malicious. This "threshold" value tells phpMussel what the maximum
; total weight of suspicious and potentially malicious qualities of files being
; uploaded that's allowable is before those files are to be flagged as
; malicious. The definition of weight in this context is the total number of
; suspicious and potentially malicious qualities identified. By default, this
; value will be set to 3. A lower value generally will result in a higher
; occurrence of false positives but a higher number of malicious files being
; flagged, whereas a higher value generally will result in a lower occurrence
; of false positives but a lower number of malicious files being flagged. It's
; generally best to leave this value at its default unless you're experiencing
; problems related to it.
threshold=3


[virustotal]

; Optionally, phpMussel is able to scan files using the Virus Total API as a
; way to provide a greatly enhanced level of protection against viruses,
; trojans, malware and other threats. By default, scanning files using the
; Virus Total API is disabled. To enable it, an API key from Virus Total is
; required. Due to the significant benefit that this could provide to you, it's
; something that I highly recommend enabling. Please be aware, however, that to
; use the Virus Total API, you MUST agree to their Terms of Service and you
; MUST adhere to all guidelines as per described by the Virus Total
; documentation! You are NOT permitted to use this integration feature UNLESS:
; You have read and agree to the Terms of Service of Virus Total and its API.
; You have read and you understand, at a minimum, the preamble of the Virus
; Total Public API documentation (everything after "VirusTotal Public API v2.0"
; but before "Contents").
vt_public_api_key=''

; By default, phpMussel will restrict which files it scans using the Virus
; Total API to those files that it considers "suspicious". You can optionally
; adjust this restriction by changing the value of the vt_suspicion_level
; directive.
vt_suspicion_level=1

; Should phpMussel apply the results of scanning using the Virus Total API as
; detections or as detection weighting? This directive exists, because,
; although scanning a file using multiple engines (as Virus Total does) should
; result in an increased detection rate (and therefore in a higher number of
; malicious files being caught), it can also result in a higher number of false
; positives, and therefore, in some circumstances, the results of scanning may
; be better utilised as a confidence score rather than as a definitive
; conclusion. If a value of 0 is used, the results of scanning using the Virus
; Total API will be applied as detections, and therefore, if any engine used by
; Virus Total flags the file being scanned as being malicious, phpMussel will
; consider the file to be malicious. If any other value is used, the results of
; scanning using the Virus Total API will be applied as detection weighting,
; and therefore, the number of engines used by Virus Total that flag the file
; being scanned as being malicious will serve as a confidence score (or
; detection weighting) for whether or not the file being scanned should be
; considered malicious by phpMussel (the value used will represent the minimum
; confidence score or weight required in order to be considered malicious). A
; value of 0 is used by default.
vt_weighting=0

; According to the Virus Total API documentation, "it is limited to at most 4
; requests of any nature in any given 1 minute time frame. If you run a
; honeyclient, honeypot or any other automation that is going to provide
; resources to VirusTotal and not only retrieve reports you are entitled to a
; higher request rate quota". By default, phpMussel will strictly adhere to
; these limitations, but due to the possibility of these rate quotas being
; increased, these two directives are provided as a means for you to instruct
; phpMussel as to what limit it should adhere to. Unless you've been instructed
; to do so, it's not recommended for you to increase these values, but, if
; you've encountered problems relating to reaching your rate quota, decreasing
; these values MAY sometimes help you in dealing with these problems. Your rate
; limit is determined as vt_quota_rate requests of any nature in any given
; vt_quota_time minute time frame.
vt_quota_rate=4

; (See description above).
vt_quota_time=1


[urlscanner]

; Enables API lookups to the hpHosts API when set to true.
lookup_hphosts=true

; Enables API lookups to the Google Safe Browsing API when the necessary API
; key is defined.
google_api_key=''

; Maximum allowable number of API lookups to perform per individual scan
; iteration. Because each additional API lookup will add to the total time
; required to complete each scan iteration, you may wish to stipulate a
; limitation in order to expedite the overall scan process. When set to 0, no
; such maximum allowable number will be applied. Set to 10 by default.
maximum_api_lookups=10

; What to do if the maximum allowable number of API lookups is exceeded? False
; = Do nothing (continue processing) [Default]; True = Flag/block the file.
maximum_api_lookups_response=false

; How long (in seconds) should the results of API lookups be cached for?
; Default is 3600 seconds (1 hour).
cache_time=3600


[template_data]

; Default theme to use for phpMussel.
theme='default'

; Font magnification. Default = 1.
Magnification=1

; The template file for custom themes utilises external CSS properties, whereas
; the template file for the default theme utilises internal CSS properties. To
; instruct phpMussel to use the template file for custom themes, specify the
; public HTTP address of your custom theme's CSS files using the css_url
; variable. If you leave this variable blank, phpMussel will use the template
; file for the default theme.
css_url=''


